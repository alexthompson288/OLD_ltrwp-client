{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"OTSpri",
				"OTSpriteAtlasCocos2D"
			],
			[
				"game",
				"GameSetting"
			],
			[
				"current",
				"currentBGIndex"
			],
			[
				"_curren",
				"_currentGameSetting"
			],
			[
				"int",
				"introdution"
			],
			[
				"per",
				"percOnSpline"
			],
			[
				"has",
				"hasToldToFollow"
			],
			[
				"Scene",
				"SceneLetter"
			]
		]
	},
	"buffers":
	[
		{
			"file": "al-client.sublime-project",
			"settings":
			{
				"buffer_size": 522,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scenes/LetterFormation/Scripts/LFManager.cs",
			"settings":
			{
				"buffer_size": 8971,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System;\nusing System.IO;\nusing AlTypes;\n\npublic class GameManager\n{\n	#region \"Public Static\"\n	public static GameManager Instance { get { return _instance; }}\n	#endregion\n	\n	#region \"Public Instance\"\n	public GameObject PersistentGameObject { get { return GameObject.Find(_persistentGOTag); }}\n	public SyncDataService SyncService { get { return _syncService; }}\n	public string ActivityDbPath { get { return _activityDbPath; }}\n	public string StateDbPath { get { return _stateDbPath; }}\n	public SqliteDatabase ActivityDb { get { return _activityDb; }}\n	public SqliteDatabase StateDb { get { return _stateDb; }}\n	public SqliteDatabase CmsDb {get {return _cmsDb;}}\n	public string InstallationId { get { return _installationId; }}\n	public string ActivityBatchId { get { return _activityBatchId; }}\n\n	public SessionMgr SessionMgr {get {return _sessionMgr;}}\n	\n	//info about cms\n	public int CmsWordCount=0;\n	\n	public void NewBatch ()\n	{\n		_activityBatchId = Guid.NewGuid().ToString();\n	}\n	\n	public void LogState()\n	{\n		Debug.Log(\"game manager is okay\");\n	}\n\n	public void LogEvent (string eventType, string userId, string additionalData)\n	{\n		ActivityDb.ExecuteNonQuery(String.Format(\n			\"INSERT INTO LoggedEvents(batch_id, date, event_type, user_id, additional_data) VALUES('{0}',{1},'{2}',{3},{4})\", \n			ActivityBatchId, \n			UnixDate.Now,\n			eventType,\n			userId == null ? \"null\" : String.Format(\"'{0}'\", userId),\n			additionalData == null ? \"null\" : String.Format(\"'{0}'\", additionalData)));\n	}\n	\n	public String GetCMSInfo()\n	{\n		DataTable dt = CmsDb.ExecuteQuery(\"SELECT * FROM words;\");\n		CmsWordCount=dt.Rows.Count;\n//		return \"word count: \" + dt.Rows.Count.ToString();\n		\n		String[] tests=GetUserWordIndex();\n		\n		List<String> yesp=GetSortedPhonemesForWord(\"fan\");\n		for(int i=0; i<yesp.Count; i++)\n		{\n			Debug.Log(\"phoneme returned: \" + yesp[i]);\n		}\n		\n		return \"iterate count: \" + tests.Length + \" with word: \" + tests[41];\n	}\n	\n	public String[] GetUserWordIndex()\n	{\n		DataTable dt=CmsDb.ExecuteQuery(\"select word from words where cvc='t' and diagraph='f'\");\n		String[] words=new String[dt.Rows.Count];\n		for(int i=0; i<dt.Rows.Count; i++)\n		{\n			words[i]=(String)dt.Rows[i][\"word\"];\n		}\n		return words;\n	}\n	\n	public String[] GetPhonemesForWord(String word)\n	{\n		//get the word\n		DataTable dt=CmsDb.ExecuteQuery(\"select id from words where word='\" + word + \"'\");\n		int wordid=(int)dt.Rows[0][\"id\"];\n		\n		//get the phonemes\n		DataTable dtp=CmsDb.ExecuteQuery(\"select phoneme from phonemes p INNER JOIN phonemes_words pw ON p.id=pw.phoneme_id WHERE pw.word_id=\" + wordid.ToString());\n		String[] phonemes=new String[dtp.Rows.Count];\n		for(int i=0; i<dtp.Rows.Count; i++)\n		{\n			//get phoneme and trim hyphen bits\n			String pr=(String)dtp.Rows[i][\"phoneme\"];\n			int ih=pr.IndexOf(\"-\");\n			if(ih>0) pr=pr.Substring(0, ih);\n\n			phonemes[i]=pr;\n		}\n		return phonemes;\n	}\n\n	static bool IsIPad1()\n	{\n		return (SystemInfo.deviceModel==\"iPad1,1\");\n	}\n\n	public DataWordData[] GetDataWordsForSection(int sectionId)\n	{\n		DataTable dt=CmsDb.ExecuteQuery(\"select * from data_words INNER JOIN words ON word_id=words.id WHERE section_id=\"+sectionId.ToString());\n		DataWordData[] dws=new DataWordData[dt.Rows.Count];\n		for(int i=0; i<dt.Rows.Count; i++)		\n		{\n			DataWordData dw;\n			dw.Word=(String)dt.Rows[i][\"word\"];\n			dw.WordId=(int)dt.Rows[i][\"word_id\"];\n			dw.Nonsense=IsBool((String)dt.Rows[i][\"nonsense\"]);\n			dw.IsTargetWord=IsBool((String)dt.Rows[i][\"is_target_word\"]);\n			dw.IsDummyWord=IsBool((String)dt.Rows[i][\"is_dummy_word\"]);\n			dw.LinkingIndex=(String)dt.Rows[i][\"linking_index\"];\n\n			dws[i]=dw;\n		}\n		return dws;\n	}\n	\n	public PhonemeData[] GetPhonemesForSection(int sectionId)\n	{\n		DataTable dt=CmsDb.ExecuteQuery(\"select id, phoneme, mneumonic, mneumonic_two from phonemes_sections INNER JOIN phonemes ON phoneme_id=id WHERE section_id=\"+sectionId.ToString());\n		PhonemeData[] phonemes=new PhonemeData[dt.Rows.Count];\n		for(int i=0; i<dt.Rows.Count; i++)\n		{\n			PhonemeData pd=new PhonemeData();\n			pd.Phoneme=(String)dt.Rows[i][\"phoneme\"];\n			pd.Mneumonic=(String)dt.Rows[i][\"mneumonic\"];\n			pd.MneumonicTwo=(String)dt.Rows[i][\"mneumonic_two\"];\n			pd.Id=(int)dt.Rows[i][\"id\"];\n			phonemes[i]=pd;\n		}\n		return phonemes;\n	}\n\n	public String[] AllMneumonics()\n	{\n		DataTable dt=CmsDb.ExecuteQuery(\"select mneumonic, mneumonic_two from phonemes ORDER BY mneumonic ASC\");\n		ArrayList mnary=new ArrayList();\n		for(int i=0; i<dt.Rows.Count; i++)\n		{\n			String s1=(String)dt.Rows[i][\"mneumonic\"];\n			String s2=(String)dt.Rows[i][\"mneumonic_two\"];\n\n			if(s1!=null && s1!=\"\") mnary.Add(s1);\n			//if(s2!=null && s2!=\"\") mnary.Add(s2);\n		}\n		String[] mns=new String[mnary.Count];\n		int j=0;\n		foreach(String s in mnary)\n		{\n			mns[j]=s;\n			j++;\n		}\n		Array.Sort (mns);\n		return mns;\n	}\n\n	public DataSentenceData[] GetDataSentencesForSection(int sectionId)\n	{\n		DataTable dt=CmsDb.ExecuteQuery(\"select * from sentences WHERE section_id=\"+sectionId.ToString());\n		DataSentenceData[] sentences=new DataSentenceData[dt.Rows.Count];\n		for(int i=0; i<dt.Rows.Count; i++)\n		{\n			DataSentenceData dsd;\n			dsd.Sentence=(String)dt.Rows[i][\"text\"];\n			dsd.LinkingIndex=(String)dt.Rows[i][\"linking_index\"];\n			sentences[i]=dsd;\n		}\n		return sentences;\n	}\n\n	public bool IsBool(String data)\n	{\n		if(data==\"t\")return true;\n		else return false;\n	}\n\n\n	public String[] GetUserLetters()\n	{\n		String[] letters=new String[26];\n		int current=0;\n		for(int i=97;i<123;i++)\n		{\n			char c=(char)i;\n			letters[current]=c.ToString();\n			current++;\n		}\n		\n		return letters;\n	}\n	\n	public List<String> GetSortedPhonemesForWord(String word)\n	{\n		if(word.Length==0) return null;\n		\n		String[]unsortedPhonemes=GetPhonemesForWord(word);\n		if(unsortedPhonemes.Length==0) return null;\n		\n		String wordRemainder=word;\n		\n		//get a size (desc) sorted list of phonemes\n		List<String>sizeDescPhonemes=new List<String>();\n		sizeDescPhonemes.Add(unsortedPhonemes[0]);\n		if(unsortedPhonemes.Length>1)\n		{\n			for(int j=1;j<unsortedPhonemes.Length; j++)\n			{\n				String p=unsortedPhonemes[j];\n				int insertAt=sizeDescPhonemes.Count;\n				for(int i=0; i<sizeDescPhonemes.Count; i++)\n				{\n					if(p.Length>=sizeDescPhonemes[i].Length)\n					{\n						insertAt=i;\n						break;\n					}\n				}\n				sizeDescPhonemes.Insert(insertAt, p);\n			}\n		}\n		\n		int ip=0;\n		int notFoundCount=0;\n		List<String>sortedPhonemes=new List<String>();\n		while (wordRemainder.Length>0 && notFoundCount<=sizeDescPhonemes.Count) {\n			if(wordRemainder.IndexOf(sizeDescPhonemes[ip])==0)\n			{\n				//insert this in sorted index & remove from unsorted (and front of word)\n				sortedPhonemes.Add(sizeDescPhonemes[ip]);\n				wordRemainder=wordRemainder.Substring (sizeDescPhonemes[ip].Length);\n				notFoundCount=0;\n			}\n			else\n			{\n				notFoundCount++;\n			}\n\n			ip++;\n\n			if(ip>=sizeDescPhonemes.Count) \n			{\n				ip=0;\n			}\n		}\n	\n		return sortedPhonemes;\n		// return sizeDescPhonemes;\n	}\n	\n	#endregion\n	\n	#region \"Private Static\"\n	private static readonly GameManager _instance = new GameManager();\n	#endregion\n	\n	#region \"Private Instance\"\n	private string _persistentGOTag = \"PersistentGO\";\n	private string _installationIdPath = Path.Combine(Application.persistentDataPath, \"installationid\");\n	private string _activityDbPath = Path.Combine(UnityEngine.Application.persistentDataPath, \"activity.db\");\n	private string _stateDbPath = Path.Combine(UnityEngine.Application.persistentDataPath, \"state.db\");\n	private string _cmsDbPath=Path.Combine(UnityEngine.Application.persistentDataPath, \"cms.db\");\n	\n	private SyncDataService _syncService;\n	private SqliteDatabase _activityDb;\n	private SqliteDatabase _stateDb;\n	private SqliteDatabase _cmsDb;\n	private string _installationId, _activityBatchId;\n\n	private SessionMgr _sessionMgr;\n	\n	private GameManager()\n	{\n		GameObject go = new GameObject(_persistentGOTag);\n		MonoBehaviour.DontDestroyOnLoad(go);\n		go.AddComponent(\"HTTPService\");\n		\n		_syncService = new SyncDataService((HTTPService)PersistentGameObject.GetComponent(\"HTTPService\"));\n		\n		if (File.Exists(_installationIdPath))\n		{\n			_installationId = File.ReadAllText(_installationIdPath);\n		}\n		else\n		{\n			_installationId = Guid.NewGuid().ToString();\n			StreamWriter sw = File.CreateText(_installationIdPath);\n			sw.Write(_installationId);\n			sw.Close();\n		}\n		\n		bool initActivityDb = !File.Exists(_activityDbPath);\n		bool initStateDb = !File.Exists(_stateDbPath);\n		bool initCmsDb=!File.Exists(_cmsDbPath);\n		\n		_activityDb = new SqliteDatabase();\n		_stateDb = new SqliteDatabase();\n		_cmsDb=new SqliteDatabase();\n		\n		_activityDb.Open(_activityDbPath);\n		_stateDb.Open(_stateDbPath);\n		\n		if (initActivityDb)\n		{\n			ActivityDb.ExecuteNonQuery(\"CREATE TABLE UserCreations(batch_id TEXT NOT NULL, id TEXT NOT NULL, user_id TEXT NOT NULL, user_name TEXT NOT NULL, date REAL)\");\n			ActivityDb.ExecuteNonQuery(\"CREATE TABLE Attempts(batch_id TEXT NOT NULL, id TEXT NOT NULL, user_id TEXT NOT NULL, date REAL, score INTEGER)\");\n			ActivityDb.ExecuteNonQuery(\"CREATE TABLE LoggedEvents(batch_id TEXT NOT NULL, date REAL, event_type TEXT NOT NULL, user_id TEXT, additional_data TEXT)\");\n		}\n		\n		if (initStateDb)\n		{\n			StateDb.ExecuteNonQuery(\"CREATE TABLE Users(id TEXT NOT NULL, name TEXT NOT NULL, creation_date REAL, last_attempt_date REAL, last_attempt_score INTEGER, best_attempt_date REAL, best_attempt_score INTEGER, num_attempts INTEGER, average_score REAL)\");\n		}\n\n		//always write cms db\n		TextAsset ta=(TextAsset)Resources.Load(\"cms\");\n		System.IO.File.WriteAllBytes(_cmsDbPath, ta.bytes);\n		\n		// if(initCmsDb)\n		// {\n		// 	TextAsset ta=(TextAsset)Resources.Load(\"cms\");\n		// 	System.IO.File.WriteAllBytes(_cmsDbPath, ta.bytes);\n		// }\n		\n		_cmsDb.Open(_cmsDbPath);\n		\n		//log it and get the count on the instance\n		Debug.Log(GetCMSInfo());\n	\n		\n		NewBatch();\n\n		_sessionMgr= new SessionMgr();\n		_sessionMgr.LogState();\n	}\n	#endregion\n}",
			"file": "Assets/_services/GameManager.cs",
			"file_size": 9938,
			"file_write_time": 1368036274000000,
			"settings":
			{
				"buffer_size": 9938,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scripts/menus/ContentBrowserTouch.cs",
			"settings":
			{
				"buffer_size": 9629,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scenes/Splat/Scripts/SplatSceneManager.cs",
			"settings":
			{
				"buffer_size": 3037,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scripts/PrintGameInfo.cs",
			"settings":
			{
				"buffer_size": 1835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_services/SessionMgr.cs",
			"settings":
			{
				"buffer_size": 319123,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scenes/LetterFormation/Scripts/LFLetterPart.cs",
			"settings":
			{
				"buffer_size": 266,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scenes/ContentBrowser/WordBank-Script/WordBankManager.cs",
			"settings":
			{
				"buffer_size": 1854,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/_scenes/ContentBrowser/TrophyRoom-Script/TrophyRoomManager.cs",
			"settings":
			{
				"buffer_size": 3532,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 107.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"panel right",
				"Origami: Create Pane with File on the Right"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"",
				"Set Syntax: Objective-C"
			]
		],
		"width": 646.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/dave/xcode/pom/Assets/_scripts/UiButtons.cs",
		"/Users/dave/xcode/cipher/Assets/Scripts/ClickEventReceiver.cs",
		"/Users/dave/xcode/cipher/Assets/Scripts/MainScene.cs",
		"/Users/dave/xcode/al-client/Assets/_scene_assets/forest_splat_fircones/forest_splat_fircones_container.txt",
		"/Users/dave/xcode/al-client/Assets/_scenes/LetterFormation/Scripts/LFManager.cs",
		"/Users/dave/xcode/al-client/Assets/_scenes/LetterFormation/Scripts/LFLetterPart.cs",
		"/Users/dave/xcode/al-client/Assets/scenes/Splat/NewScripts/SplatManager.cs",
		"/Users/dave/xcode/al-client/Assets/scenes/Splat/NewScripts/SplatBally.cs"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"forest_splat",
			"case",
			"btnfz2",
			"Bally",
			"Manager"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SplatBally",
			"SplatManager"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "al-client.sublime-project",
					"settings":
					{
						"buffer_size": 522,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/_scenes/LetterFormation/Scripts/LFManager.cs",
					"settings":
					{
						"buffer_size": 8971,
						"regions":
						{
						},
						"selection":
						[
							[
								7534,
								7534
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4369.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/_services/GameManager.cs",
					"settings":
					{
						"buffer_size": 9938,
						"regions":
						{
						},
						"selection":
						[
							[
								3767,
								3767
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 565.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/_scripts/menus/ContentBrowserTouch.cs",
					"settings":
					{
						"buffer_size": 9629,
						"regions":
						{
						},
						"selection":
						[
							[
								3557,
								3557
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/_scenes/Splat/Scripts/SplatSceneManager.cs",
					"settings":
					{
						"buffer_size": 3037,
						"regions":
						{
						},
						"selection":
						[
							[
								905,
								905
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/_scripts/PrintGameInfo.cs",
					"settings":
					{
						"buffer_size": 1835,
						"regions":
						{
						},
						"selection":
						[
							[
								1807,
								1807
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 110.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "Assets/_scenes/Splat/Scripts/SplatSceneManager.cs",
					"settings":
					{
						"buffer_size": 3037,
						"regions":
						{
						},
						"selection":
						[
							[
								576,
								576
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/_services/SessionMgr.cs",
					"settings":
					{
						"buffer_size": 319123,
						"regions":
						{
						},
						"selection":
						[
							[
								35261,
								35273
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 9.0,
						"translation.y": 16495.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/_scenes/LetterFormation/Scripts/LFLetterPart.cs",
					"settings":
					{
						"buffer_size": 266,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/_scenes/LetterFormation/Scripts/LFManager.cs",
					"settings":
					{
						"buffer_size": 8971,
						"regions":
						{
						},
						"selection":
						[
							[
								5771,
								5771
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2948.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/_services/GameManager.cs",
					"settings":
					{
						"buffer_size": 9938,
						"regions":
						{
						},
						"selection":
						[
							[
								2966,
								2970
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Assets/_scenes/ContentBrowser/WordBank-Script/WordBankManager.cs",
					"settings":
					{
						"buffer_size": 1854,
						"regions":
						{
						},
						"selection":
						[
							[
								763,
								763
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Assets/_scenes/ContentBrowser/TrophyRoom-Script/TrophyRoomManager.cs",
					"settings":
					{
						"buffer_size": 3532,
						"regions":
						{
						},
						"selection":
						[
							[
								748,
								748
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.sftp":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"gameinfo",
				"_scripts/PrintGameInfo.cs"
			],
			[
				"trophy",
				"_scenes/ContentBrowser/TrophyRoom-Script/TrophyRoomManager.cs"
			],
			[
				"word",
				"_scenes/ContentBrowser/WordBank-Script/WordBankManager.cs"
			],
			[
				"gameman",
				"_services/GameManager.cs"
			],
			[
				"scenem",
				"_scenes/Splat/Scripts/SplatSceneManager.cs"
			],
			[
				"contentb",
				"_scripts/menus/ContentBrowserTouch.cs"
			],
			[
				"lfmana",
				"_scenes/LetterFormation/Scripts/LFManager.cs"
			],
			[
				"lfpa",
				"_scenes/LetterFormation/Scripts/LFLetterPart.cs"
			],
			[
				"splatscenemana",
				"_scenes/Splat/Scripts/SplatSceneManager.cs"
			],
			[
				"gamem",
				"_services/GameManager.cs"
			],
			[
				"letterpart",
				"_scenes/LetterFormation/Scripts/LFLetterPart.cs"
			],
			[
				"lfmanager",
				"_scenes/LetterFormation/Scripts/LFManager.cs"
			],
			[
				"lflett",
				"_scenes/LetterFormation/Scripts/LFLetterPart.cs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 282.0,
	"status_bar_visible": true
}
